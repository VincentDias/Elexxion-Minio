services:
  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_NOTIFY_WEBHOOK_ENABLE_webhook: ${MINIO_NOTIFY_WEBHOOK_ENABLE_webhook}
      MINIO_NOTIFY_WEBHOOK_ENDPOINT_webhook: ${MINIO_NOTIFY_WEBHOOK_ENDPOINT_webhook}
    env_file:
      - .env
    command: minio server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 10s

  webhook:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: webhook_api
    ports:
      - "8000:8000"
    volumes:
      - ./scripts:/app/scripts
    depends_on:
      - minio
    environment:
      - MINIO_ENDPOINT=${MINIO_ENDPOINT}
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_BUCKET=${MINIO_BUCKET}
    command: uvicorn scripts.webhook_receiver:app --host 0.0.0.0 --port 8000 --reload

  init:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: init_structure
    volumes:
      - ./scripts:/app/scripts
    working_dir: /app/scripts
    command: python init_structure.py
    depends_on:
      minio:
        condition: service_healthy
    environment:
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET: ${MINIO_BUCKET}
    env_file:
      - .env

  mc:
    image: minio/mc
    container_name: mc
    depends_on:
      init:
        condition: service_completed_successfully
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      mc alias set elexxion http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} &&
      mc event add elexxion/elexxion-minio-bucket arn:minio:sqs::webhook:webhook --event 'put' &&
      tail -f /dev/null
      "
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET: ${MINIO_BUCKET}
    env_file:
      - .env

  aws:
    image: minio/mc
    container_name: mc-sync
    depends_on:
      minio:
        condition: service_healthy
    env_file:
      - .env
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      MINIO_BUCKET: ${MINIO_BUCKET}
    entrypoint: ["/bin/sh","-c","mc alias set minio-local http://minio:9000 $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD && mc alias set aws-s3 https://s3.eu-west-1.amazonaws.com $AWS_ACCESS_KEY_ID $AWS_SECRET_ACCESS_KEY && while true; do echo \"[$(date +'%Y-%m-%d %H:%M:%S')] DÃ©but de la synchronisation...\"; mc mirror --overwrite --remove --region eu-west-1 minio-local/$MINIO_BUCKET/ aws-s3/elexxion-minio-bucket/; echo \"[$(date +'%Y-%m-%d %H:%M:%S')] Pause 60 s...\"; sleep 60; done"]

  scrapper:
    build:
      context: .
      dockerfile: Dockerfile.scrapper
    container_name: scrapper
    depends_on:
      mc:
        condition: service_completed_successfully
    command: python /app/scripts/scrapper.py
    environment:
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET: ${MINIO_BUCKET}
    env_file:
      - .env
    volumes:
      - ./scripts:/app/scripts

volumes:
  minio_data:
